// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Pomelo.EntityFrameworkCore.MySql.Infrastructure;
using Pomelo.EntityFrameworkCore.MySql.Internal;
using Qerp.Models;


namespace Qerp.DBContext
{
    public partial class QerpContext : DbContext
    {
        public QerpContext()
        {
        }

        public QerpContext(DbContextOptions<QerpContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Apptype> Apptypes { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Clientcontact> Clientcontacts { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Contactrole> Contactroles { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Models.Image> Images { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Invoiceline> Invoicelines { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Projectcontact> Projectcontacts { get; set; }
        public virtual DbSet<Prospect> Prospects { get; set; }
        public virtual DbSet<Prospectgoal> Prospectgoals { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Models.Task> Tasks { get; set; }
        public virtual DbSet<Tasknote> Tasknotes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vat> Vats { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                IConfigurationRoot configuration = new ConfigurationBuilder()
                   .SetBasePath(Directory.GetCurrentDirectory())
                   .AddJsonFile("appsettings.json")
                   .Build();
                var connectionString = configuration.GetConnectionString("QerpContext");
                optionsBuilder.UseMySql(connectionString, 
                    new MySqlServerVersion(new Version(10, 3, 38)));
                   //Microsoft.EntityFrameworkCore.ServerVersion.Parse("10.11.2-mariadb"), Pomelo.EntityFrameworkCore.MySql.Infrastructure.ServerType.MariaDb);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_general_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<Apptype>(entity =>
            {
                entity.ToTable("apptypes");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Number)
                    .HasColumnType("int(11)")
                    .HasColumnName("number");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("cities");

                entity.HasIndex(e => e.CompanyId, "FK_cities_companies");

                entity.HasIndex(e => e.CountryId, "FK_cities_countries");

                entity.HasIndex(e => e.ProvinceId, "FK_cities_provinces");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId")
                    .HasDefaultValueSql("-1");

                entity.Property(e => e.CountryId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("countryId")
                    .HasDefaultValueSql("'1000020'");

                entity.Property(e => e.ImportProvince)
                    .HasMaxLength(100)
                    .HasColumnName("importProvince");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(100)
                    .HasColumnName("postalCode");

                entity.Property(e => e.ProvinceId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("provinceId");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cities_companies");

                entity.HasOne(d => d.Country)
                    .WithMany()
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_cities_countries");

                entity.HasOne(d => d.Province)
                    .WithMany()
                    .HasForeignKey(d => d.ProvinceId)
                    .HasConstraintName("FK_cities_provinces");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.ToTable("clients");

                entity.HasIndex(e => e.CityId, "FK_clients_cities");

                entity.HasIndex(e => e.CompanyId, "FK_clients_companies");

                entity.HasIndex(e => e.InvoiceCityId, "FK_clients_invoiceCities");

                entity.HasIndex(e => e.Id, "ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.ApptypeId, e.Id }, "apptype_id_UN")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.ApptypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("apptypeId")
                    .HasDefaultValueSql("'1000'");

                entity.Property(e => e.CityId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("cityId");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .HasColumnName("email");

                entity.Property(e => e.Iban)
                    .HasMaxLength(50)
                    .HasColumnName("iban");

                entity.Property(e => e.InvoiceAddress)
                    .HasMaxLength(255)
                    .HasColumnName("invoiceAddress");

                entity.Property(e => e.InvoiceCityId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("invoiceCityId");

                entity.Property(e => e.InvoiceEmail)
                    .HasMaxLength(150)
                    .HasColumnName("invoiceEmail");

                entity.Property(e => e.InvoiceSameAddress)
                    .HasColumnType("bit(1)")
                    .HasColumnName("invoiceSameAddress");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .HasColumnName("mobile");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("name");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("phone");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Vat)
                    .HasMaxLength(150)
                    .HasColumnName("vat");

                entity.HasOne(d => d.City)
                    .WithMany()
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_clients_cities");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_clients_companies");

                entity.HasOne(d => d.InvoiceCity)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceCityId)
                    .HasConstraintName("FK_clients_invoiceCities");
            });

            modelBuilder.Entity<Clientcontact>(entity =>
            {
                entity.ToTable("clientcontacts");

                entity.HasIndex(e => e.ContactId, "FK_clientcontacts_contacts");

                entity.HasIndex(e => e.ClientId, "FK_contactcompanies_companies");

                entity.HasIndex(e => e.ContactroleId, "contactroleId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ClientId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("clientId");

                entity.Property(e => e.ContactId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactId");

                entity.Property(e => e.ContactroleId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactroleId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Client)
                    .WithMany()
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_clientcontacts_clients");

                entity.HasOne(d => d.Contact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_clientcontacts_contacts");

                entity.HasOne(d => d.Contactrole)
                    .WithMany()
                    .HasForeignKey(d => d.ContactroleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_clientcontacts_contactroles");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("companies");

                entity.HasIndex(e => e.CityId, "FK_companies_cities");

                entity.HasIndex(e => e.InvoiceCityId, "FK_companies_invoiceCities");

                entity.HasIndex(e => e.Id, "ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.ApptypeId, e.Id }, "aptype_id_UN")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.ApptypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("apptypeId")
                    .HasDefaultValueSql("'10000'");

                entity.Property(e => e.CityId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("cityId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .HasColumnName("email");

                entity.Property(e => e.Iban)
                    .HasMaxLength(50)
                    .HasColumnName("iban");

                entity.Property(e => e.InvoiceAddress)
                    .HasMaxLength(255)
                    .HasColumnName("invoiceAddress");

                entity.Property(e => e.InvoiceCityId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("invoiceCityId");

                entity.Property(e => e.InvoiceEmail)
                    .HasMaxLength(150)
                    .HasColumnName("invoiceEmail");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .HasColumnName("mobile");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("name");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("phone");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Vat)
                    .HasMaxLength(150)
                    .HasColumnName("vat");

                entity.HasOne(d => d.City)
                    .WithMany()
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_companies_cities");

                entity.HasOne(d => d.InvoiceCity)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceCityId)
                    .HasConstraintName("FK_companies_invoiceCities");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.ToTable("contacts");

                entity.HasIndex(e => e.CityId, "FK_contacts_cities");

                entity.HasIndex(e => new { e.ApptypeId, e.Id }, "apptype_id_UN")
                    .IsUnique();

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.ApptypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("apptypeId")
                    .HasDefaultValueSql("'30000'");

                entity.Property(e => e.CityId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("cityId");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Fullname)
                    .HasMaxLength(200)
                    .HasColumnName("fullname");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(255)
                    .HasColumnName("mobile");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .HasColumnName("phone");

                entity.Property(e => e.Surname)
                    .HasMaxLength(100)
                    .HasColumnName("surname");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.City)
                    .WithMany()
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_contacts_cities");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_contacts_companies");
            });

            modelBuilder.Entity<Contactrole>(entity =>
            {
                entity.ToTable("contactroles");

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_contactroles_companies");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("countries");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.Iso)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("iso")
                    .IsFixedLength();

                entity.Property(e => e.Iso3)
                    .HasMaxLength(3)
                    .HasColumnName("iso3")
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasColumnName("name");

                entity.Property(e => e.Nicename)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasColumnName("nicename");

                entity.Property(e => e.Numcode)
                    .HasColumnType("smallint(6)")
                    .HasColumnName("numcode");

                entity.Property(e => e.Phonecode)
                    .HasColumnType("int(5)")
                    .HasColumnName("phonecode");
            });

            modelBuilder.Entity<Models.Image>(entity =>
            {
                entity.ToTable("images");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.HasIndex(e => new { e.ApptypeId, e.LinkedtypeId }, "tasks_FK");

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ApptypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("apptypeId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Extension)
                    .HasMaxLength(255)
                    .HasColumnName("extension");

                entity.Property(e => e.Filename)
                    .HasMaxLength(255)
                    .HasColumnName("filename");

                entity.Property(e => e.Imagelink)
                    .HasMaxLength(255)
                    .HasColumnName("imagelink");

                entity.Property(e => e.LinkedtypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("linkedtypeId");

                entity.Property(e => e.Sort)
                    .HasColumnType("int(11)")
                    .HasColumnName("sort");

                entity.Property(e => e.Thumblink)
                    .HasMaxLength(255)
                    .HasColumnName("thumblink");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Images)
                    .HasPrincipalKey(p => new { p.ApptypeId, p.Id })
                    .HasForeignKey(d => new { d.ApptypeId, d.LinkedtypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("clients_FK");

                //entity.HasOne(d => d.Company)
                //    .WithMany(p => p.Images)
                //    .HasPrincipalKey(p => new { p.ApptypeId, p.Id })
                //    .HasForeignKey(d => new { d.ApptypeId, d.LinkedtypeId })
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("companies_FK");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.Images)
                    .HasPrincipalKey(p => new { p.ApptypeId, p.Id })
                    .HasForeignKey(d => new { d.ApptypeId, d.LinkedtypeId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("contacts_FK");

                //entity.HasOne(d => d.Project)
                //    .WithMany(p => p.Images)
                //    .HasPrincipalKey(p => new { p.ApptypeId, p.Id })
                //    .HasForeignKey(d => new { d.ApptypeId, d.LinkedtypeId })
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("projects_FK");

                //entity.HasOne(d => d.Task)
                //    .WithMany(p => p.Images)
                //    .HasPrincipalKey(p => new { p.ApptypeId, p.Id })
                //    .HasForeignKey(d => new { d.ApptypeId, d.LinkedtypeId })
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("tasks_FK");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("invoices");

                entity.HasIndex(e => new { e.ApptypeId, e.Id }, "apptype_id_UN")
                    .IsUnique();

                entity.HasIndex(e => e.ClientId, "clientId");

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.HasIndex(e => e.ProjectId, "projectId");

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ApptypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("apptypeId")
                    .HasDefaultValueSql("'40000'");

                entity.Property(e => e.ClientId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("clientId");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.IsCreditNote)
                    .HasColumnType("bit(1)")
                    .HasColumnName("isCreditNote");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("number");

                entity.Property(e => e.ProjectId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("projectId");

                entity.Property(e => e.Sent)
                    .HasColumnType("bit(1)")
                    .HasColumnName("sent");

                entity.HasOne(d => d.Client)
                    .WithMany()
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_invoices_clients");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_invoices_companies");

                entity.HasOne(d => d.Project)
                    .WithMany()
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_invoices_projects");
            });

            modelBuilder.Entity<Invoiceline>(entity =>
            {
                entity.ToTable("invoicelines");

                entity.HasIndex(e => e.ClientId, "clientId");

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.HasIndex(e => e.InvoiceId, "invoiceId");

                entity.HasIndex(e => e.ProjectId, "projectId");

                entity.HasIndex(e => e.TaskId, "taskId");

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ClientId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("clientId");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.InvoiceId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("invoiceId");

                entity.Property(e => e.ProjectId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("projectId");

                entity.Property(e => e.TaskId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("taskId");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Client)
                    .WithMany()
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_invoicelines_clients");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_invoicelines_companies");

                entity.HasOne(d => d.Invoice)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_invoicelines_invoices");

                entity.HasOne(d => d.Project)
                    .WithMany()
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_invoicelines_projects");

                entity.HasOne(d => d.Task)
                    .WithMany()
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_invoicelines_tasks");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.ToTable("projects");

                entity.HasIndex(e => new { e.ApptypeId, e.Id }, "aptype_id_UN")
                    .IsUnique();

                entity.HasIndex(e => e.ClientId, "clientId");

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ApptypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("apptypeId")
                    .HasDefaultValueSql("'50000'");

                entity.Property(e => e.ClientId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("clientId");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.IsProspect)
                    .HasColumnType("bit(1)")
                    .HasColumnName("isProspect");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name");

                entity.Property(e => e.Number)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("number");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Client)
                    .WithMany()
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_projects_clients");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_projects_companies");
            });

            modelBuilder.Entity<Projectcontact>(entity =>
            {
                entity.ToTable("projectcontacts");

                entity.HasIndex(e => e.ContactId, "contactId");

                entity.HasIndex(e => e.ContactroleId, "contactroleId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.HasIndex(e => e.ProjectId, "projectId");

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ContactId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactId");

                entity.Property(e => e.ContactroleId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactroleId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.ProjectId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("projectId");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Contact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_projectcontacts_contacts");

                entity.HasOne(d => d.Contactrole)
                    .WithMany()
                    .HasForeignKey(d => d.ContactroleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_projectcontacts_contactroles");

                entity.HasOne(d => d.Project)
                    .WithMany()
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_projectcontacts_projects");
            });

            modelBuilder.Entity<Prospect>(entity =>
            {
                entity.ToTable("prospects");

                entity.HasIndex(e => e.ContactId, "contactId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.HasIndex(e => e.ProjectId, "projectId");

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ContactId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Deadline)
                    .HasColumnType("datetime")
                    .HasColumnName("deadline");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.EstimatedBuget)
                    .HasColumnType("int(11)")
                    .HasColumnName("estimatedBuget");

                entity.Property(e => e.ProjectId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("projectId");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Contact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_prospects_contacts");

                entity.HasOne(d => d.Project)
                    .WithMany()
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__projects");
            });

            modelBuilder.Entity<Prospectgoal>(entity =>
            {
                entity.ToTable("prospectgoals");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.HasIndex(e => e.ProspectId, "prospectId");

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Deadline)
                    .HasColumnType("datetime")
                    .HasColumnName("deadline");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.ProspectId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("prospectId");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Prospect)
                    .WithMany()
                    .HasForeignKey(d => d.ProspectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_prospectgoals_prospects");
            });

            modelBuilder.Entity<Province>(entity =>
            {
                entity.ToTable("provinces");

                entity.HasIndex(e => e.CompanyId, "FK_provinces_companies");

                entity.HasIndex(e => e.CountryId, "FK_provinces_countries");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId")
                    .HasDefaultValueSql("-1");

                entity.Property(e => e.CountryId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("countryId");

                entity.Property(e => e.ImportName)
                    .HasMaxLength(100)
                    .HasColumnName("importName");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_provinces_companies");

                entity.HasOne(d => d.Country)
                    .WithMany()
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_provinces_countries");
            });

            modelBuilder.Entity<Models.Task>(entity =>
            {
                entity.ToTable("tasks");

                entity.HasIndex(e => new { e.ApptypeId, e.Id }, "apptype_id_UN")
                    .IsUnique();

                entity.HasIndex(e => e.ClientId, "clientId");

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.ContactId, "contactId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.HasIndex(e => e.ProjectId, "projectId");

                entity.HasIndex(e => e.ProspectGoalId, "prospectGoalId");

                entity.HasIndex(e => e.ProspectId, "prospectId");

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ApptypeId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("apptypeId")
                    .HasDefaultValueSql("'60000'");

                entity.Property(e => e.ClientId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("clientId");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Completed)
                    .HasColumnType("bit(1)")
                    .HasColumnName("completed");

                entity.Property(e => e.ContactId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Deadline)
                    .HasColumnType("datetime")
                    .HasColumnName("deadline");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.MaxTime).HasColumnName("maxTime");

                entity.Property(e => e.ProjectId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("projectId");

                entity.Property(e => e.ProspectGoalId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("prospectGoalId");

                entity.Property(e => e.ProspectId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("prospectId");

                entity.Property(e => e.Timer).HasColumnName("timer");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("title");

                entity.Property(e => e.ToInvoice)
                    .HasColumnType("bit(1)")
                    .HasColumnName("toInvoice");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Client)
                    .WithMany()
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tasks_clients");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tasks_companies");

                entity.HasOne(d => d.Contact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tasks_contacts");

                entity.HasOne(d => d.Project)
                    .WithMany()
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tasks_projects");

                entity.HasOne(d => d.ProspectGoal)
                    .WithMany()
                    .HasForeignKey(d => d.ProspectGoalId)
                    .HasConstraintName("FK_tasks_prospectgoals");

                entity.HasOne(d => d.Prospect)
                    .WithMany()
                    .HasForeignKey(d => d.ProspectId)
                    .HasConstraintName("FK_tasks_prospects");
            });

            modelBuilder.Entity<Tasknote>(entity =>
            {
                entity.ToTable("tasknotes");

                entity.HasIndex(e => e.ContactId, "contactId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.ContactId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("note");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Contact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tasknotes_contacts");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("users");

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.ContactId, "contactId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.ContactId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("contactId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.LastToken)
                    .HasMaxLength(500)
                    .HasColumnName("lastToken");

                entity.Property(e => e.Password)
                    .HasMaxLength(250)
                    .HasColumnName("password");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .HasColumnName("username");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_users_companies");

                entity.HasOne(d => d.Contact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_users_contacts");
            });

            modelBuilder.Entity<Vat>(entity =>
            {
                entity.ToTable("vats");

                entity.HasIndex(e => e.CompanyId, "companyId");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("id");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("bigint(20)")
                    .HasColumnName("companyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.Description)
                    .HasColumnType("int(11)")
                    .HasColumnName("description");

                entity.Property(e => e.Percentage)
                    .HasColumnType("int(11)")
                    .HasColumnName("percentage");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("updated")
                    .HasDefaultValueSql("current_timestamp()");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_vats_companies");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}